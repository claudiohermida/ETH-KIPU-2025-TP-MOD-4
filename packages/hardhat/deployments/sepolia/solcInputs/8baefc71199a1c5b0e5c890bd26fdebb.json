{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "contracts/SimpleSwap.sol": {
      "content": "// Order of Layout\n// Contract elements should be laid out in the following order:\n\n// Pragma statements\n\n// Import statements\n\n// Events\n\n// Errors\n\n// Interfaces\n\n// Libraries\n\n// Contracts\n\n// Inside each contract, library or interface, use the following order:\n\n// Type declarations\n\n// State variables\n\n// Events\n\n// Errors\n\n// Modifiers\n\n// Functions\n\n\n// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.27;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\n\n\n/// @title Interface for SimpleSwap\ninterface ISimpleSwap {\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external ;\n    // returns (uint[] memory amounts);\n\n    function getPrice(address tokenA, address tokenB) external view returns (uint256 price);\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external view returns (uint256);\n}\n\n\n\ncontract SimpleSwap is ISimpleSwap, ERC20 {\n\n\n    /*///////////////////////////////////////////////////////////////\n                           TYPES\n     //////////////////////////////////////////////////////////////*/\n\n    /** @notice Local state of the swapExactTokensForTokens function\n     *  @dev This struct is used to store the local state of the swap operation, \n     *  @param tokenIn: address of input token\n     *  @param tokenOut: address of output token\n     *  @param reserveIn: reserve of input token in the swap contract\n     *  @param reserveOut: reserve of output token in the swap contract\n     *  @param amountOut: amount of output token to be received\n     */\n    struct SwapLocalState{\n        address tokenIn; \n        address tokenOut;  \n        uint reserveIn;\n        uint reserveOut;\n        uint amountOut;\n    }\n\n\n     /*///////////////////////////////////////////////////////////////\n                           STATE\n      //////////////////////////////////////////////////////////////*/\n\n    // we should have used private variables instantiated in the constructor for the two tokens,\n    // rather than overcomplicating the swap interface by adding the token addresses in every function call\n     IERC20 private immutable _tokenA;\n     IERC20 private immutable _tokenB;\n\n     /*///////////////////////////////////////////////////////////////\n                           EVENTS\n      //////////////////////////////////////////////////////////////*/\n    /**\n     * @notice someone added liquidity to the pool\n     * @param lProvider:  address of liquidity provider\n     * @param to:  address of receiver of liquidity tokens\n     * @param amountAIn: amount of token A deposited\n     * @param amountBIn: amount of token B deposited\n     * @param liquidityTokensOut: amount of LP shares minted\n     */\n    event LiquidityAdded(address indexed lProvider, address indexed to, uint amountAIn, uint amountBIn, uint liquidityTokensOut); \n\n    /**\n     * @notice some LP removed liquidity to the pool\n     * @param lProvider:  address of liquidity provider\n     * @param to:  address of receiver of liquidity tokens\n     * @param liquidityTokensIn: amount of LP shares burnt\n     * @param amountAOut: amount of token A received/withdrawn\n     * @param amountBOut: amount of token B received/withdrawn\n     */\n    event LiquidityRemoved(address indexed lProvider, address indexed to, uint liquidityTokensIn, uint amountAOut, uint amountBOut); \n    \n     /**\n     * @notice a swap has been performed from tokenIn into tokenOut\n     * @param sender:  address of provider of input tokens\n     * @param receiver: address of recipient of output tokens\n     * @param tokenIn: address of token deposited \n     * @param tokenOut: address of token received\n     * @param amountIn: amount of token deposite\n     * @param amountOut: amount of token received/withdrawn\n     */\n    event Swap(\n        address indexed sender, \n        address indexed receiver, \n        address tokenIn, \n        address tokenOut,     \n        uint amountIn, \n        uint amountOut\n    ); \n\n     /*///////////////////////////////////////////////////////////////\n                           ERRORS\n      //////////////////////////////////////////////////////////////*/\n\n    \n\n     /**\n      * @notice invalid token address for interaction\n      */\n    error INVALID_TOKEN();\n\n     /**\n      * @notice invalid address to send tokens to (address(0))\n      */\n    error INVALID_TO();\n\n     /**\n      * @notice insufficient amount of expected output tokens, \n      * below minimum desired\n      */\n    error INSUFFICIENT_OUTPUT_AMOUNT();\n\n    /**\n      * @notice insufficient liquidity to swap or to fulfill a liquidity withdrawal\n      */\n    error INSUFFICIENT_LIQUIDITY();\n\n    /**\n      * @notice proposed liquidity provision would unbalance pool, \n      * breaking the invariant x * y == k\n      */\n    error UNBALANCED_LIQUIDITY_PROVISION();\n\n    /**\n      * @notice deadline expired to perform operation\n      */\n    error DEADLINE_EXPIRED();\n\n    /**\n      * @notice invalid swap route\n      * in our simple set up, it should have length 2\n      * and consists of either [tokenA,tokenB] or [tokenB,tokenA]\n      */\n    error INVALID_SWAP_ROUTE();\n\n     /*///////////////////////////////////////////////////////////////\n                           MODFIFIERS\n      //////////////////////////////////////////////////////////////*/\n\n    /**\n      * @notice must be performed up to deadline\n      */\n    modifier onlyBeforeDeadline (uint deadline){\n        if (block.timestamp > deadline) {\n            revert DEADLINE_EXPIRED();\n        }\n        _;\n    }\n\n    /**\n      * @notice must not use address(0)\n      */\n    modifier onlyValidAddress (address to){\n        if (to == address(0)) {\n            revert INVALID_TO();\n        }\n        _;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                           HELPER FUNCTIONS\n      //////////////////////////////////////////////////////////////*/\n\n    /**\n     * @dev Calculates the optimal amount of tokenA and tokenB to add to the liquidity pool\n     * based on desired amounts and current pool reserves.\n     * @param amountADesired The maximum amount of tokenA the caller is willing to deposit.\n     * @param amountBDesired The maximum amount of tokenB the caller is willing to deposit.\n     * @param reserveA The current reserve of tokenA in the pair contract.\n     * @param reserveB The current reserve of tokenB in the pair contract.\n     * @return amountA amountB Amounts The calculated actual amounts of tokenA and tokenB to be deposited.\n     */\n    function _calculateAmountsToDeposit(\n        uint amountADesired,\n        uint amountBDesired,\n        uint reserveA,\n        uint reserveB\n    ) internal pure returns (uint amountA, uint amountB) {\n   //     uint reserveA = tokenA.balanceOf(address(this));\n   //     uint reserveB = tokenB.balanceOf(address(this));\n        if (reserveA == 0 && reserveB == 0) {\n            // First liquidity provision for this pair.\n            // In this simplified example, we'll just use the desired amounts directly.\n            // A real Uniswap Router would likely ensure both are non-zero.\n            return (amountADesired, amountBDesired);\n        }\n\n        // Calculate amountB needed if we use all of amountADesired at current ratio\n        uint amountBOptimal = (amountADesired * reserveB) / reserveA;\n\n        if (amountBOptimal <= amountBDesired) {\n            // We have enough B to match desired A\n            amountA = amountADesired;\n            amountB = amountBOptimal;\n        } else {\n            // We don't have enough B, so use all of desired B and calculate A\n            uint amountAOptimal = (amountBDesired * reserveA) / reserveB;\n            amountA = amountAOptimal;\n            amountB = amountBDesired;\n        }\n    }\n\n    /**\n     * @dev Calculates the amount of liquidity tokens to mint,\n     * based on deposited amounts and current pool reserves.\n     * Special case: initial liquidity provision, no reserves.\n     * @param amountADeposited amount of tokens A deposited.\n     * @param amountBDeposited amount of tokens B deposited.\n     * @param reserveA The current reserve of tokenA in the swap contract.\n     * @param reserveB The current reserve of tokenB in the swap contract.\n     * @param totalLP the total supply of LP_AB tokens minted so far.\n     * @return liquidityTokens The amount of LP_AB tokens to mint.\n     */\n    function _calculateLiquidityToMint(\n        uint amountADeposited,\n        uint amountBDeposited,\n        uint reserveA,\n        uint reserveB,\n        uint totalLP\n    ) internal pure returns (uint liquidityTokens){\n        // check whether this is the inital liquidity provision\n        if (totalLP == 0){  // ( reserveA == 0 && reserveB == 0)\n            liquidityTokens = Math.sqrt(amountADeposited * amountBDeposited);\n        } else {\n            liquidityTokens = Math.min((amountADeposited * totalLP)/reserveA, (amountBDeposited * totalLP)/reserveB);\n        }\n    }\n\n    /**\n     * @dev Calculates the amount of tokens to withdraw when redeeming liquidity,\n     * based on current pool reserves.\n     * @param liquidityToBurn amount of liquidity tokens to redeem.\n     * @param reserveA The current reserve of tokenA in the swap contract.\n     * @param reserveB The current reserve of tokenB in the swap contract.\n     * @param totalLP the total supply of LP_AB tokens minted so far.\n     * @return amountAOut and amountBOut Amounts of A and B tokens to withdraw from the pool.\n     */\n    function _calculateExitLiquidity(\n        uint liquidityToBurn,\n        uint reserveA,\n        uint reserveB,\n        uint totalLP\n    ) internal pure returns (uint amountAOut, uint amountBOut){\n        // we could check totalLP != 0, but let Solidity safe math take care of it\n        amountAOut = (liquidityToBurn * reserveA) / totalLP;\n        amountBOut = (liquidityToBurn * reserveB) / totalLP;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                          CONSTRUCTOR\n      //////////////////////////////////////////////////////////////*/\n    constructor(address tokenA_, address tokenB_) ERC20(\"LPShares_AB\",\"LP_AB\"){\n        _tokenA = IERC20(tokenA_);\n        _tokenB = IERC20(tokenB_);\n    }\n\n\n    /*///////////////////////////////////////////////////////////////\n                           LOGIC\n      //////////////////////////////////////////////////////////////*/\n\n     /**\n     * @dev Adds liquidity to the pool.\n     * @param tokenA The address of the first token.\n     * @param tokenB The address of the second token.\n     * @param amountADesired The maximum amount of tokenA to deposit.\n     * @param amountBDesired The maximum amount of tokenB to deposit.\n     * @param amountAMin The minimum amount of tokenA to accept. Transaction reverts if less is used.\n     * @param amountBMin The minimum amount of tokenB to accept. Transaction reverts if less is used.\n     * @param to The address to receive the liquidity tokens.\n     * @param deadline The unix timestamp after which the transaction will revert.\n     * @return amountA The actual amount of tokenA deposited.\n     * @return amountB The actual amount of tokenB deposited.\n     * @return liquidity The amount of liquidity tokens minted.\n     */\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external onlyBeforeDeadline(deadline) onlyValidAddress(to) returns (uint amountA, uint amountB, uint liquidity){\n        // 0. verifies that tokenA and tokenB are the same as the ones in the contract\n        if (tokenA != address(_tokenA) || tokenB != address(_tokenB)) {revert INVALID_TOKEN();}    \n        // 1. gas saving: we read the reserves into local variables, as they are used in various calculations\n        uint reserveA = IERC20(tokenA).balanceOf(address(this));\n        uint reserveB = IERC20(tokenB).balanceOf(address(this));\n        uint totalLP = totalSupply();\n\n        // 2. compute the optimal amounts to deposit\n        (amountA, amountB) =  _calculateAmountsToDeposit(\n                                             amountADesired,\n                                             amountBDesired,\n                                             reserveA,\n                                             reserveB\n                                        );\n\n        // 3. check whether required minimums are met \n        if (amountA < amountAMin || amountB < amountBMin){\n            revert UNBALANCED_LIQUIDITY_PROVISION();\n        }\n\n        //4. transfer tokens from sender into swap contract\n        IERC20(tokenA).transferFrom(msg.sender, address(this), amountA);\n        IERC20(tokenB).transferFrom(msg.sender, address(this), amountB);\n\n        //5. calculate amount of liquidity tokens to mint\n        liquidity =  _calculateLiquidityToMint(\n                                    amountA,\n                                    amountB,\n                                    reserveA,\n                                    reserveB,\n                                    totalLP\n                                );\n        //6. if we got a positive quantity, \n        // mint the corresponding tokens to the target address using the internal _mint\n        // and emit the corresponding event\n        if (liquidity > 0){\n            _mint(to, liquidity);\n            emit LiquidityAdded(msg.sender, to, amountA, amountB, liquidity); \n        }\n    } // addLiquidity\n\n    /**\n     * @dev Removes liquidity from the pool.\n     * @param tokenA The address of the first token.\n     * @param tokenB The address of the second token.\n     * @param liquidity The amount of LP_AB tokens to redeem\n     * @param amountAMin The minimum amount of tokenA to accept. Transaction reverts if less is issued.\n     * @param amountBMin The minimum amount of tokenB to accept. Transaction reverts if less is issued.\n     * @param to The address to receive the A and B tokens.\n     * @param deadline The unix timestamp after which the transaction will revert.\n     * @return amountA The amount of tokenA received.\n     * @return amountB The amount of tokenB received.\n     */\n     function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external onlyBeforeDeadline(deadline) onlyValidAddress(to) returns (uint256 amountA, uint256 amountB){\n        // 0. verifies that tokenA and tokenB are the same as the ones in the contract\n        if (tokenA != address(_tokenA) || tokenB != address(_tokenB)) {revert INVALID_TOKEN();}  \n         // 1. gas saving: we read the reserves into local variables, as they are used in various calculations\n        uint reserveA = IERC20(tokenA).balanceOf(address(this));\n        uint reserveB = IERC20(tokenB).balanceOf(address(this));\n        uint totalLP = totalSupply();\n\n        //2. calculate the amount of tokens A and B to transfer\n        (amountA, amountB) = _calculateExitLiquidity(\n                                liquidity,\n                                reserveA,\n                                reserveB,\n                                totalLP\n                            );\n        \n         // 3. check whether required minimums are met\n        if (amountA < amountAMin || amountB < amountBMin){\n            revert INSUFFICIENT_LIQUIDITY();\n        } else {\n        //4. burn the liquidity tokens, calling the internal _burn function    \n             _burn(msg.sender,liquidity);\n        //5. transfer the A and B tokens to receiver\n        IERC20(tokenA).transfer(to, amountA);\n        IERC20(tokenB).transfer(to, amountB);\n        //6. emit the LiquidityRemoved event\n        emit LiquidityRemoved(msg.sender, to, liquidity, amountA, amountB);\n        }\n        \n    } // removeLiquidity\n\n    /**\n     * @dev swap a given amount of tokens for its corresponding pair in the pool, according to the current balance\n     * @param amountIn The amount of tokens provided to swap\n     * @param amountOutMin The minimum of tokens accepted in exchange (slippage protection)\n     * @param path The route of token addresses to follow \n     * (in our case, only 2, either [tokenA,tokenB] or [tokenB,tokenA])\n     * @param to The address to receive the exchanged tokens.\n     * @param deadline The unix timestamp after which the transaction will revert. \n     */\n    function swapExactTokensForTokens(\n                uint amountIn, \n                uint amountOutMin, \n                address[] calldata path, \n                address to,     \n                uint deadline\n            ) external onlyBeforeDeadline(deadline) onlyValidAddress(to){ \n           // returns (uint[] memory amounts)\n        //0. setup a struct to store local state        \n        SwapLocalState memory localState;\n        // 1. check path has the right length\n        if (path.length != 2) { revert INVALID_SWAP_ROUTE(); }\n\n        //2. obtain the address of the tokens in question, saving gas in multiple reads from array\n        (localState.tokenIn, localState.tokenOut) = (path[0], path[1]);\n\n        //3. verify validity of addresses,\n        // must be either _tokenA or _tokenB and different from each other\n        if (localState.tokenIn != address(_tokenA)){\n            if (localState.tokenIn != address(_tokenB)){\n                revert INVALID_TOKEN();\n            } else if (localState.tokenOut != address(_tokenA)) { // tokenIn == tokenB\n                       revert INVALID_TOKEN();\n            } \n        } else if (localState.tokenOut != address(_tokenB)) { // tokenIn == tokenA\n                   revert INVALID_TOKEN();\n        }\n        //4. gas saving, store reserves in local variables\n        localState.reserveIn = IERC20(localState.tokenIn).balanceOf(address(this));\n        localState.reserveOut = IERC20(localState.tokenOut).balanceOf(address(this));\n        \n        \n        //5. compute amount of tokens to transfer \n        localState.amountOut = getAmountOut(\n            amountIn, \n            localState.reserveIn,\n            localState.reserveOut\n        );\n        \n\n        //6. check if minimum met\n        if (localState.amountOut < amountOutMin) {\n            revert INSUFFICIENT_OUTPUT_AMOUNT();\n        }\n\n        //7. perform transfers and emit event\n        IERC20(localState.tokenIn).transferFrom(msg.sender, address(this), amountIn);\n        IERC20(localState.tokenOut).transfer(to, localState.amountOut);\n         emit Swap( \n              msg.sender, // sender\n              to, // target address \n              localState.tokenIn, // input token \n              localState.tokenOut, // output token    \n              amountIn, \n              localState.amountOut\n         );\n        //8. assign the quantities in the stablished output array\n      // amounts = new uint[](2);\n       //  amounts[0] = amountIn;\n       //  amounts[1] = amountOut;\n    } // swapExactTokensForTokens\n\n    /**\n     * @dev return the price of token A in terms of tokenB, according to current reserves\n     * @param tokenA The address of the first token.\n     * @param tokenB The address of the second token.\n     * @return price The price of token A in decimals units of tokenB\n     */  \n    function getPrice(address tokenA, address tokenB) external view returns (uint256 price){\n        // gas saving, store reserves in local variables\n        uint reserveA = IERC20(tokenA).balanceOf(address(this));\n        uint reserveB = IERC20(tokenB).balanceOf(address(this));\n\n        // check if there is liquidity and if so, calculate price\n        if (reserveA > 0 && reserveB > 0){\n            price = (reserveB * 1e18)/ reserveA;\n        } else {\n            revert INSUFFICIENT_LIQUIDITY();\n        }\n\n    }\n\n    /**\n     * @dev return the amount of tokens to obtain in exchange for amountIn, according to current reserves\n     * we use public rather than external as we also use this function in swapExactTokensForTokens\n     * if there is no reserveIn and a zero amountIn, it will fail for division by zero.\n     * @param amountIn The amount of tokens to exchange\n     * @param reserveIn The amount of reserves of the input token\n     * @param reserveOut The amount of reserves of the output token\n     * @return amountOut the amount of output tokens\n     */  \n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) public pure returns (uint256 amountOut){\n        amountOut = (amountIn * reserveOut) / (reserveIn + amountIn);\n    }\n\n    \n} // contract SimpleSwap\n"
    },
    "contracts/Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.27;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Token is ERC20, Ownable {\n    constructor(string memory name, string memory symbol)\n        ERC20(name, symbol)\n        Ownable(msg.sender)\n    {}\n\n    // want to mint tokens at will\n    function mint(address to, uint256 amount) public onlyOwner {\n        _mint(to, amount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}